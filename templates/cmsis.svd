{% import 'macros.jinja2' as utils %}
<?xml version="1.0" encoding="UTF-8"?>
<!--
    Autogenerated for {{ info.title }} v{{ info.version }}.
    Generated from {{ fileName }} using Cyanobyte Codegen v{{ version }}
-->
<device schemaVersion="1.1" xmlns:xs="http://www.w3.org/2001/XMLSchema-instance" xs:noNamespaceSchemaLocation="CMSIS-SVD_Schema_1_1.xsd">
    <vendor>{{ info.copyright.name }}</vendor>
    <name>{{ info.title }}</name>
    <version>{{ info.version }}</version>
    <description>{{ info.description }}</description>
    <licenseText>
    {{ utils.license(info.copyright.name, info.copyright.date, info.license.name) }}
    </licenseText>
    <!-- Placeholder values -->
    <addressUnitBits>8</addressUnitBits>
    <width>8</width>
    <!-- Define our peripheral -->
    <peripherals>
        <peripheral>
            <name>{{ info.title }}</name>
            <description>{{ info.description }}</description>
            {% if i2c.address is iterable and i2c.address is not string %}
            <baseAddress>{{ i2c.address[0] }}</baseAddress>
            {% else %}
            <baseAddress>{{ i2c.address }}</baseAddress>
            {% endif %}
            <addressBlock>
                <offset>0</offset>
                <size>{{ i2c.addressMask }}</size>
                <usage>registers</usage>
            </addressBlock>
            <registers>
            {% for register in registers -%}
            {% for key in register.keys() %}
                <register>
                    <name>{{key}}</name>
                    <description>{{register[key].description}}</description>
                    <addressOffset>{{register[key].address}}</addressOffset>
                    <size>{{register[key].length}}</size>
                    <access>read-write</access>
                    <resetValue>0x00</resetValue>
                    <resetMask>0xFF</resetMask>
                    <fields>
                    {% for function in functions -%}
                    {% for fkey in function.keys() %}
                    {% if function[fkey].register == '#/registers/' + key %}
                        <field>
                            <name>{{ fkey }}</name>
                            <description>
                            {{ function[fkey].description }}
                            </description>
                            <lsb>{{ function[fkey].bitEnd }}</lsb>
                            <msb>{{ function[fkey].bitStart }}</msb>
                            {% if function[fkey].readWrite == 'W' %}
                            <access>write-only</access>
                            {% elif function[fkey].readWrite == 'R' %}
                            <access>read-only</access>
                            {% elif function[fkey].readWrite == 'R/W' %}
                            <access>read-write</access>
                            {% endif %}
                            {% if function[fkey].type == 'enum' %}
                            <enumeratedValues>
                            {% for enum in function[fkey].enum -%}
                            {% for ekey in enum.keys() %}
                                <enumeratedValue>
                                    <name>{{ ekey }}</name>
                                    <description>{{ enum[ekey].title }}</description>
                                    <value>{{ enum[ekey].value }}</value>
                                </enumeratedValue>
                            {% endfor %}
                            {% endfor %}
                            </enumeratedValues>
                            {% endif %}
                        </field>
                    {% endif %}
                    {% endfor %}
                    {% endfor %}
                    </fields>
                </register>
            {% endfor %}
            {% endfor %}
            </registers>
        </peripheral>
    </peripherals>
</device>