{% macro params(input) -%}
{% for variable in input %}
{% for key in variable.keys() -%}
{% if key != 'value' %}{{key}}{{- "," if not loop.last -}}{% endif %}
{%- endfor %}
{% endfor %}
{%- endmacro %}

{% macro variables(vars) -%}
{% for var in vars %}
{% for key in var.keys() %}
    {{ numconv(var[key]) }} {{key}}; // Variable declaration
{% endfor %}
{% endfor %}
{%- endmacro %}

{% macro numconv(cyan) -%}
{%- if cyan == 'int8' -%}
char
{%- elif cyan == 'uint8' -%}
uint8_t
{%- elif cyan == 'int16' -%}
short
{%- elif cyan == 'uint16' -%}
uint16_t
{%- elif cyan == 'float32' -%}
float
{%- else -%}
/* ERROR UNDEFINED TYPE */
{%- endif -%}
{%- endmacro %}

{% macro numtype(len, sign) -%}
{%- if sign -%}
{%- if len <= 8 -%}
char
{%- elif len <= 16 -%}
short
{%- elif len <= 32 -%}
long
{%- else -%}
long long
{%- endif -%}
{%- else -%}
{%- if len <= 8 -%}
uint8_t
{%- elif len <= 16 -%}
uint16_t
{%- elif len <= 32 -%}
uint32_t
{%- else -%}
uint64_t
{%- endif -%}
{%- endif -%}
{%- endmacro %}

{% macro recursiveAssignLogic(logicalStep, keys) -%}
{% for key in keys -%}
{# Perform a recursive summation from an array of logical steps #}
{% if key == 'sum' -%}
    ({%- for step in logicalStep[key] -%}
    {% if step is iterable and step is not string -%}
    {{ recursiveAssignLogic(step, step.keys()) -}}
    {%- else -%}
    {{step}}
    {%- endif %}
    {{- "+" if not loop.last -}}
    {%- endfor -%})
{%- endif %}
{# Perform a recursive difference from an array of logical steps #}
{% if key == 'difference' -%}
    ({%- for step in logicalStep[key] -%}
    {% if step is iterable and step is not string -%}
    {{ recursiveAssignLogic(step, step.keys()) -}}
    {%- else -%}
    {{step}}
    {%- endif %}
    {{- "-" if not loop.last -}}
    {%- endfor -%})
{%- endif %}
{# Perform a recursive product from an array of logical steps #}
{% if key == 'product' -%}
    ({%- for step in logicalStep[key] -%}
    {% if step is iterable and step is not string -%}
    {{ recursiveAssignLogic(step, step.keys()) -}}
    {%- else -%}
    {{step}}
    {%- endif %}
    {{- "*" if not loop.last -}}
    {%- endfor -%})
{%- endif %}
{# Perform a recursive division from an array of logical steps #}
{% if key == 'division' -%}
    ({%- for step in logicalStep[key] -%}
    {% if step is iterable and step is not string -%}
    {{ recursiveAssignLogic(step, step.keys()) -}}
    {%- else -%}
    {{ step }}
    {%- endif %}
    {{- "/" if not loop.last -}}
    {%- endfor -%})
{%- endif %}
{# Perform a recursive modulus from an array of logical steps #}
{% if key == 'modulus' -%}
    ({%- for step in logicalStep[key] -%}
    {% if step is iterable and step is not string -%}
    {{ recursiveAssignLogic(step, step.keys()) -}}
    {%- else -%}
    {{ step }}
    {%- endif %}
    {{- "%" if not loop.last -}}
    {%- endfor -%})
{%- endif %}
{# Perform a bitwise OR from an array of logical steps #}
{% if key == 'bitwiseOr' -%}
    ({%- for step in logicalStep[key] -%}
    {% if step is iterable and step is not string -%}
    {{ recursiveAssignLogic(step, step.keys()) -}}
    {%- else -%}
    {{step}}
    {%- endif %}
    {{- "|" if not loop.last -}}
    {%- endfor -%})
{%- endif %}
{# Perform a bitwise AND from an array of logical steps #}
{% if key == 'bitwiseAnd' -%}
    ({%- for step in logicalStep[key] -%}
    {% if step is iterable and step is not string -%}
    {{ recursiveAssignLogic(step, step.keys()) -}}
    {%- else -%}
    {{step}}
    {%- endif %}
    {{- "&" if not loop.last -}}
    {%- endfor -%})
{%- endif %}
{# Perform a power operation #}
{% if key == 'power' -%}
    pow({{logicalStep[key][0]}}, {{logicalStep[key][1]}})
{%- endif %}
{# Perform an arc tangent operation #}
{% if key == 'arc tangent' -%}
    atan({{logicalStep[key]}})
{%- endif %}
{# Bitwise ops #}
{%- if key == 'bitShiftLeft' -%}
    ({{logicalStep.var}} << {{logicalStep.bits}})
{%- endif %}
{%- if key == 'bitShiftRight' -%}
    ({{logicalStep.var}} >> {{logicalStep.bits}})
{%- endif %}
{%- endfor %}
{%- endmacro %}